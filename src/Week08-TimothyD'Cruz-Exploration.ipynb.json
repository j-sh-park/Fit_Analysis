{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 8 Mini Assignment - Timothy D'Cruz\n",
    "## Data Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook will be using libraries such as pandas and matplotlib to analyse and complete basic exploration on the datasets of person1-step and person2-step. This is an initial analysis and will provide findings as to trends and patterns in the step data. Furthermore, this notebook will be using the technique of literate programming to ensure the reproducibility and eligibility are maximised for the viewer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we import the nessecary libraries for the analysis\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Person1 iPhone SE</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Person1 iPhone SE</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Person1 iPhone SE</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Person1 iPhone SE</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Person1 iPhone SE</td>\n",
       "      <td>2014-12-07</td>\n",
       "      <td>8</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Source        Date  Hour  Count\n",
       "0  Person1 iPhone SE  2014-12-07     8     13\n",
       "1  Person1 iPhone SE  2014-12-07     8     13\n",
       "2  Person1 iPhone SE  2014-12-07     8      1\n",
       "3  Person1 iPhone SE  2014-12-07     8      9\n",
       "4  Person1 iPhone SE  2014-12-07     8     15"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We then import the datasets and do an initial visualisation of the table to ensure the contents are correct \n",
    "\n",
    "Data_1 = pd.read_csv('person1-step-data.csv')\n",
    "Data_2 = pd.read_csv('person2-step-data.csv')\n",
    "Data_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>Date</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Person2 Phone</td>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Person2 Phone</td>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Person2 Phone</td>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Person2 Phone</td>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Person2 Phone</td>\n",
       "      <td>2014-11-29</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Source        Date  Hour  Count\n",
       "0  Person2 Phone  2014-11-29     6      6\n",
       "1  Person2 Phone  2014-11-29     6      4\n",
       "2  Person2 Phone  2014-11-29     6      3\n",
       "3  Person2 Phone  2014-11-29     6      9\n",
       "4  Person2 Phone  2014-11-29     6      6"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source    object\n",
      "Date      object\n",
      "Hour       int64\n",
      "Count      int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# We will now visualise the types of data \n",
    "print(Data_1.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source    object\n",
      "Date      object\n",
      "Hour       int64\n",
      "Count      int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(Data_2.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Thus, we will change the date to a pandas date format\n",
    "Data_1['Date'] = pd.to_datetime(Data_1['Date'])\n",
    "Data_2['Date'] = pd.to_datetime(Data_2['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For further cleaning, we will drop all NA values\n",
    "\n",
    "Data_1_clean = Data_1.dropna()\n",
    "Data_2_clean = Data_2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12274f610>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We then isolate the count data and complete some intial visualisation techniques \n",
    "\n",
    "Count_1 = Data_1_clean['Count'] \n",
    "plt.plot(Count_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12268d6a0>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Count_2 = Data_2_clean['Count'] \n",
    "plt.plot(Count_2, color='r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
